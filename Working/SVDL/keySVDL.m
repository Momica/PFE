
clear all;
clc;
addpath utilities;
addpath src;
tic();

%setting parameter
parameters.pro_sign          =   100;        
parameters.par.nDim          =   90;
parameters.lambda            =   0.001;      %test lambda
parameters.lambda1           =   0.001;
parameters.lambda2           =   0.01;
parameters.lambda3           =   1e-4;
parameters.dnum              =   400;

session  =  4;
par.nameDatabase  =   ['mpie_s' num2str(session) '_SVDL'];
load(['database/session' num2str(session) '_05_1_netural_all']);

% We load Sparse Dicos if they already exist, otherwise we generate it
if exist('/Users/baptistemetge/Code/PFE/Git/PFE/DataRetrieved/session1/featuresSession1StripesDicos.mat') == 2
    disp('hello');
    load('/Users/baptistemetge/Code/PFE/Git/PFE/DataRetrieved/session1/featuresSession1StripesDicos.mat');
    %dico = fieldnames(dicoStructure);
else
    %dicos = struct(); % will contain all the dico that will be generated by this program
    % Load generic structure
    featuresStructure = load('/Users/baptistemetge/Code/PFE/Git/PFE/DataRetrieved/session1/featuresSession1Stripes.mat');
    raw_features = fieldnames(featuresStructure);

    for n = 1:length(raw_features)

        % Generate SVDL on current feature
        currentFeature = featuresStructure.(raw_features{n});
        currentFeature = double(currentFeature);
        [dict_v,er,disc_set,tr_dat,trls] = generateSparseDictionnary(currentFeature,parameters);
        % We save the data, to speed next use based on the same set
        newDico = struct('dict_v',dict_v,'disc_set',disc_set,'er',er,'tr_dat',tr_dat,'trls',trls);
        dicos{n} = newDico;
    end
    dicosName = '/Users/baptistemetge/Code/PFE/Git/PFE/DataRetrieved/session1/featuresSession1StripesDicos.mat';
    save(dicosName,'dicos');
end

% Load testing structure
testFeaturesStructure = load('../../DataRetrieved/session4/featuresSession4Stripes.mat');
testFeatures = fieldnames(testFeaturesStructure);
labels(labels>213) = labels(labels>213) -1; % there is no data with label 213, so we shift the label

for n = 1:length(testFeatures)
    currentTestFeature = testFeaturesStructure.(testFeatures{n});
    currentTestFeature = double(currentTestFeature);
    
    
    tt_dat{n} = currentTestFeature;
    ttls   = labels;
    tt_dat{n} = tt_dat{n}(:,ttls<parameters.pro_sign);
    ttls   = ttls(:,ttls<parameters.pro_sign);
    tt_dat{n}  = dicos{1,n}.disc_set'*tt_dat{n};
end
    % do classification
    correct_rate = Fun_ESRC_gaps(dicos,tt_dat,ttls,parameters.lambda);



fid = fopen(['result/demo_result_' par.nameDatabase '.txt'],'a');
fprintf(fid,'\n%s\n','========================================');
fprintf(fid,'%s%8f%s%8f%s%8f\n','lambda1 = ',parameters.lambda1,'lambda2 = ',parameters.lambda2,' lambda3= ',parameters.lambda3);
fprintf(fid,'%s%8f%s%8f\n','nDim = ',parameters.par.nDim,' lambda= ',parameters.lambda);
fprintf(fid,'%s%8f\n','reco_rate1 = ',correct_rate);
fclose(fid);
toc();